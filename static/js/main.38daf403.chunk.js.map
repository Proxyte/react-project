{"version":3,"sources":["car/Car.js","App.js","serviceWorker.js","index.js"],"names":["Car","props","style","border","marginBottom","padding","carName","year","type","value","onChange","onChangeName","onClick","onDelete","App","state","cars","name","paragraphStyle","pageTitle","showCars","toggleCarsHandler","setState","carIndex","car","index","splice","carsTemplate","this","map","key","bind","event","target","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAceA,G,MAZH,SAACC,GACX,OACE,yBAAKC,MAAO,CAAEC,OAAQ,mBAAoBC,aAAc,OAAQC,QAAS,SACvE,yCAAeJ,EAAMK,SACrB,qCAAWL,EAAMM,MACjB,2BAAOC,KAAK,OAAOC,MAAOR,EAAMK,QAASI,SAAUT,EAAMU,eACzD,4BAAQC,QAASX,EAAMY,UAAvB,aCwESC,E,4MA3EbC,MAAQ,CACNC,KAAM,CACJ,CAAEC,KAAM,OAAQV,KAAM,KACtB,CAAEU,KAAM,OAAQV,KAAM,MACtB,CAAEU,KAAM,QAASV,KAAM,OAEzBW,eAAgB,CACd,gBAAmB,SACnB,MAAS,SACT,SAAY,QAEdC,UAAW,oBACXC,UAAU,G,EAGZC,kBAAoB,WAClB,EAAKC,SAAS,CACZF,UAAW,EAAKL,MAAMK,Y,EAI1BT,aAAe,SAACM,EAAMM,GACpB,IAAMC,EAAM,EAAKT,MAAMC,KAAKO,GACtBP,EAAI,YAAO,EAAKD,MAAMC,MAE5BQ,EAAIP,KAAOA,EACXD,EAAKO,GAAYC,EACjB,EAAKF,SAAS,CACZN,U,EAIJH,SAAW,SAACY,GACV,IAAIT,EAAI,YAAO,EAAKD,MAAMC,MAC1BA,EAAKU,OAAOD,EAAO,GAEnB,EAAKH,SAAS,CACZN,U,uDAIM,IAAD,OACHW,EAAe,KAgBnB,OAdGC,KAAKb,MAAMK,WACZO,EAAeC,KAAKb,MAAMC,KAAKa,KAAI,SAACL,EAAKC,GACvC,OACE,kBAAC,EAAD,CACEK,IAAKL,EACLnB,QAASkB,EAAIP,KACbV,KAAMiB,EAAIjB,KACVM,SAAY,EAAKA,SAASkB,KAAK,EAAMN,GACrCd,aAAc,SAACqB,GAAD,OAAW,EAAKrB,aAAaqB,EAAMC,OAAOxB,MAAOgB,UAOrE,yBAAKS,UAAU,OACb,4BAAKN,KAAKb,MAAMI,WAChB,6BAEA,4BAAQP,QAASgB,KAAKP,mBAAtB,gBAEA,6BAEEM,O,GApEQQ,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.38daf403.chunk.js","sourcesContent":["import React from 'react';\n\nconst Car = (props) => {\n  return (\n    <div style={{ border: \"1px solid purple\", marginBottom: '10px', padding: \"10px\"}}>\n      <h3>Car name: {props.carName}</h3>\n      <h3>Year: {props.year}</h3>\n      <input type=\"text\" value={props.carName} onChange={props.onChangeName}/>\n      <button onClick={props.onDelete}>Delete</button>\n      {/* <button onClick={props.onChangeTitle}>Click</button> */}\n    </div>\n  )\n}\n\nexport default Car;","import React, {Component} from 'react';\nimport './App.css';\nimport Car from './car/Car';\n\nclass App extends Component {\n  state = {\n    cars: [\n      { name: \"Ford\", year: 208},\n      { name: \"Audi\", year: 2019},\n      { name: \"Audi2\", year: 2019},\n    ],\n    paragraphStyle: {\n      'backgroundColor': 'yellow',\n      'color': \"purple\",\n      'fontSize': '20px'\n    },\n    pageTitle: \"React Application\",\n    showCars: false\n  };\n\n  toggleCarsHandler = () => {\n    this.setState({\n      showCars: !this.state.showCars\n    })\n  }\n\n  onChangeName = (name, carIndex) => {\n    const car = this.state.cars[carIndex];\n    const cars = [...this.state.cars];\n\n    car.name = name;\n    cars[carIndex] = car;\n    this.setState({\n      cars\n    })\n  } \n\n  onDelete = (index) => {\n    let cars = [...this.state.cars];\n    cars.splice(index, 1);\n\n    this.setState({\n      cars\n    })\n  }\n\n  render() {\n    let carsTemplate = null\n\n    if(this.state.showCars) {\n      carsTemplate = this.state.cars.map((car, index) => {\n        return (\n          <Car \n            key={index}\n            carName={car.name} \n            year={car.year} \n            onDelete = {this.onDelete.bind(this, index)}\n            onChangeName={(event) => this.onChangeName(event.target.value, index)} \n            />\n        )\n      })\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>{this.state.pageTitle}</h1>\n        <br />\n\n        <button onClick={this.toggleCarsHandler}>Change title</button>\n\n        <br />\n\n        { carsTemplate }\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}